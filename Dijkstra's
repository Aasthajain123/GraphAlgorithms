// 2 Ways


// Using Priority queue

#include<bits/stdc++.h>
using namepsce std;
int main()
{

int n, m , source;
cin>>n>>m >> source;

vector<pair<int,int>> g[n+1];

int a,b,wt;
for(int i=0;i<m;i++)
{
cin>>a>>b>>wt;
g[a].push_back({b,wt});
g[b].push_back({a,wt});
}


cin>> source;

priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
vector<int> distTo(n+1, INT_MAX);

distTo[source]=0;

pq.push(make_pair(0,source));

while(!pq.empty())
{
int dist=pq.top().first;
int prev=pq.top().second;

pq.pop();
//vector<pair<int,int>> iterator it;
// for(it = g[prev].begin(); it!=g[prev].end(); it++)

for(auto it: g[prev])
{

int next= it.first;
int nextDist= it.second;

if(distTo[next] > distTo[prev] +nextDist)
{

distTo[next] = distTo[prev] +nextDist;
pq.push(make_pair(distTo[next], next));

}
}
}

for(int i=0;i<=n;i++) cout<< distTo[i]<<" ";

return 0;

}









// Using Set


Class Solution
{

vector<int> dist(V, INT_MAX);
dist[S]=0;
set<pait<int,int>> s;
s.insert({0,S});

while(!s.empty())
{

auto x= *(s.begin());
s.erase(x);

for(auto it: adj[x.second])
{
if(dist[it[0]]> dist[x.second]+ it[1])
{
s.erase({dist[it[0]],it[0]});
dist[it[0]]= dist[x.second]+ it[1];
s.insert({dist[it[0]],it[0]});



}
}
}

 return dist;
}

