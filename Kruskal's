#include<bits/stdc++.h>
using namespace std;

struct node
{
int u,v,wt;
node( int u, vector<int> &parent)
{
u=first;
v=second;
wt=weight;


}
};




bool comp(node a , node b)
{
return a.wt<b.wt;
}

int findPar(int node, vector<int> & parent)
{
if(node == parent[node])
return node;

return findpar(parent[node], parent);
}

void unionn(int u, int v, vector<int> & parent, vector<int> & rank)
{

u=findPar(u, parent);
v=findpar(v, parent );


if(rank[u]<rank[v])
{
parent[u]=v;
}
else if(rank[v] < rank[u])
{
parent[v]=u;
}
else
{
parent[v]=u;
rank[u]++;
}



}

void main()
{
 int N,m;
 cin>>N>>m;
 vector<node> edges;
 for(int i=0;i<m;i++)
 {
 int u,v,wt;
 cin>>u>>v>>wt;
edges.push_back((node(u,v,wt));
}

sort(edges.begin(), eges.end(), comp);

vector<int> parent(N);
for(int i=0;i<N;i++)
parent[i]=i;

vector<int> rank(N,0);
int cost=0;

vector<pair<int,int>> mst;
for(auto it: edges)
{
if(findPar(it.v, parent) != findPar(it.u, parent)
{
cost+=it.wt;
mst.push_back({it.u,it.v});
unionn(it.u, it.v, parent, rank);



}
}

cout<<cost<<endl;
for(auto it: mst)
cout<<it.first<<" " << it.second<< endl;

return 0;
}


